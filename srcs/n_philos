error_management.c:72:	if (data->n_philo < 0)
error_management.c:74:	if (data->time_to_die < 0)
error_management.c:76:	if (data->time_to_eat < 0)
error_management.c:78:	if (data->time_to_sleep < 0)
error_management.c:82:		if (data->eat_counter < 0)
routine.c:11:	pthread_mutex_lock(&data->has_eaten_mutex);
routine.c:12:	if (data->n_philo_has_eaten == data->n_philo)
routine.c:14:		dprintf(2, "%d = %d\n", data->n_philo_has_eaten, data->n_philo);
routine.c:15:		pthread_mutex_unlock(&data->has_eaten_mutex);
routine.c:18:	pthread_mutex_unlock(&data->has_eaten_mutex);
routine.c:19:	pthread_mutex_lock(&data->died_mutex);
routine.c:20:	if (data->died)
routine.c:22:		pthread_mutex_unlock(&data->died_mutex);
routine.c:25:	pthread_mutex_unlock(&data->died_mutex);
routine.c:37:	waiting(data->time_to_wait);
routine.c:48:	pthread_mutex_lock(&data->time_remain_mutex);
routine.c:49:	philo->time_remain = (get_time() - data->begin_time) + data->time_to_die;
routine.c:50:	pthread_mutex_unlock(&data->time_remain_mutex);
routine.c:52:	pthread_mutex_lock(&data->n_eaten_mutex);
routine.c:53:	if (philo->n_meals == data->eat_counter && philo->has_eaten == 0)
routine.c:55:	pthread_mutex_unlock(&data->has_eaten_mutex);
routine.c:56:	if (!waiting(data->time_to_eat * 1000))
routine.c:74:	if (!waiting(data->time_to_sleep * 1000))
routine.c:87:	philo->time_remain = data->time_to_die;
main.c:19:	if (data->time_to_sleep < data->time_to_eat && data->n_philo % 2)
main.c:20:		return ((data->time_to_eat - data->time_to_sleep) * 1000 + 1);
main.c:33:	data->n_philo = ft_atoi(av[1]);
main.c:34:	data->time_to_die = ft_atoi(av[2]);
main.c:35:	data->time_to_eat = ft_atoi(av[3]);
main.c:36:	data->time_to_sleep = ft_atoi(av[4]);
main.c:38:		data->eat_counter = ft_atoi(av[5]);
main.c:41:	data->begin_time = get_time();
main.c:42:	data->time_to_wait = get_time_to_sleep(data);
main.c:43:	data->died = 0;	
main.c:44:	data->n_philo_has_eaten = 0;
main.c:53:	dprintf(2, "%d\n", data->n_philo);
main.c:54:	dprintf(2, "%d\n", data->time_to_die);
main.c:55:	dprintf(2, "%d\n", data->time_to_eat);
main.c:56:	dprintf(2, "%d\n", data->time_to_sleep);
main.c:58:		dprintf(2, "%d\n", data->eat_counter);
main.c:76:	if (pthread_mutex_init(&data->output, 0))
main.c:78:	if (pthread_mutex_init(&data->died_mutex, 0))
main.c:80:	if (pthread_mutex_init(&data->n_eaten_mutex, 0))
main.c:82:	if (pthread_mutex_init(&data->time_remain_mutex, 0))
main.c:84:	if (pthread_mutex_init(&data->n_eaten_mutex, 0))
main.c:95:	philos = malloc(sizeof(t_philo) * data->n_philo);
main.c:99:	data->begin_time = get_time();
main.c:100:	while (i < data->n_philo)
main.c:111:	while (i < data->n_philo)
main.c:148:	while (i < data->n_philo)
fork.c:12:	data->forks = malloc(sizeof(pthread_mutex_t) * data->n_philo);
fork.c:13:	if (!data->forks)
fork.c:15:	while (i < data->n_philo)
fork.c:17:		if (pthread_mutex_init(&data->forks[i], 0))
fork.c:29:	while (i < data->n_philo)
fork.c:31:		philos[i].l_fork = &data->forks[i];
fork.c:35:	while (i < data->n_philo + 1)
checking.c:10:	pthread_mutex_lock(&data->has_eaten_mutex);
checking.c:13:		data->n_philo_has_eaten++;
checking.c:14:		if (data->n_philo_has_eaten == data->n_philo)
checking.c:16:			pthread_mutex_unlock(&data->has_eaten_mutex);
checking.c:21:	pthread_mutex_unlock(&data->has_eaten_mutex);
checking.c:30:	pthread_mutex_lock(&data->time_remain_mutex);
checking.c:31:	if ((get_time() - data->begin_time) > philo->time_remain)
checking.c:33:		pthread_mutex_unlock(&data->time_remain_mutex);
checking.c:35:		pthread_mutex_lock(&data->died_mutex);
checking.c:36:		data->died = 1;
checking.c:37:		pthread_mutex_unlock(&data->died_mutex);
checking.c:40:	pthread_mutex_unlock(&data->time_remain_mutex);
checking.c:54:		while (i < data->n_philo)
checking.c:57:				return (pthread_mutex_lock(&data->output), 0);
checking.c:59:				return (pthread_mutex_lock(&data->output), 0);
monitor.c:18:	time_stamp = get_time() - data->begin_time;
